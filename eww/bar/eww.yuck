;; Variables
(defpoll battery 
    :interval "15s"
    :initial 0
    "./scripts/battery --bat")
(defpoll battery_status 
    :interval "1m"
    :initial "Full"
    "./scripts/battery --bat-st")
(defpoll memory 
    :interval "15s"
    :initial 0
    "scripts/memory")
(defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
(defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
(defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")
(deflisten workspace "scripts/workspace")

;; (defvar eww "$HOME/.local/bin/eww/eww -c $EWW_CONFIG_DIR")


;; widgets

(include "audio.yuck")
(include "wifi.yuck")
(include "song.yuck")
(include "clock.yuck")
(include "bright.yuck")
(include "system.yuck")
(include "powermenu.yuck")

(defwidget workspaces []
  (literal :content workspace))


(defwidget bat []
    (box :class "bat_module" :vexpand "false" :hexpand "false" 
      (circular-progress :value battery
          :class "batbar"
          :thickness 4
       (button 
           :class "iconbat"
           :tooltip "battery on ${battery}%"
           :onclick "./scripts/pop system"
             (label :wrap false
                    :limit-width 2
                    :show-truncated false
                      :text " ")))))


(defwidget mem []
    (box :class "mem_module" :vexpand "false" :hexpand "false" 
      (circular-progress :value memory
          :class "membar"
          :thickness 4
       (button 
           :class "iconmem"
           :tooltip "using ${memory}% ram"
           :onclick "$EWW_CONFIG_DIR/scripts/pop system"
            (label :limit-width 2
                    :show-truncated false
                    :wrap false
                    :text "󰍛")))))



(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))

        

(defwidget left []
  (box :orientation "h" 
   :space-evenly false  
      :halign "end"
   :class "left_modules"
   (bright)
   (volume)
   (wifi)
   (sep)
   (bat)
   (mem)
   (sep)
   (clock_module)))


(defwidget right []
 (box :orientation "h" 
  :space-evenly false  
     :halign "start"
  :class "right_modules"
  (powerbutton)))
  

(defwidget center []
  (box :orientation "h" 
   :space-evenly false  
      :halign "center"
   :class "center_modules"
   (music)))

(defwidget bar_1 []
  (box :class "bar_class"
       :orientation "h"
   (right)
   (center)
   (left)))
    

(defwindow bar
          :geometry (geometry :x "0%"
                       :y "9px"
                       :width "98%"
                       :height "30px"
                       :anchor "top center")
          :stacking "fg"
          :exclusive true
          :monitor 0
          :windowtype "dock"
  (bar_1))
  
(defwindow calendar
  :geometry (geometry :x "-20px" 
             :y "7%" 
                     :anchor "top right"
             :width "270px" 
             :height "60px")
  :stacking "fg"
  :exclusive false
  :monitor 0
 (cal))


(defwindow audio_ctl
  :geometry (geometry :x "-20px" 
             :y "7%" 
                     :anchor "top right"
             :width "280px" 
             :height "60px")
             

  :stacking "fg"
  :exclusive false
  :monitor 0
 (audio))


(defwindow system
  :geometry (geometry :x "-20px" 
             :y "7%" 
                     :anchor "top right"
             :width "290px" 
             :height "120px")
             
  :monitor 0
 (system))


;;  music
(defwindow music_win :stacking "fg" :focusable "false" :screen 1
 :geometry (geometry :x "0" :y "7%" :width 428 :height 104 :anchor "top center")
 :monitor 0
         (music_pop))

